/*
 * MIT License
 *
 * Copyright (c) 2020 Melms Media LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

buildscript {
    ext {
        kotlinVersion = '1.4.31'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

group 'gg.octave'
version '6.2'

mainClassName = 'gg.octave.bot.Launcher'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    maven {
        url 'https://m2.dv8tion.net/releases'
        name 'm2-dv8tion'
    }
    jcenter()
    maven { url 'https://dl.bintray.com/natanbc/maven' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://dl.bintray.com/fluffyfirefly/com.fluffyfirefly' }
}

dependencies {
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    // Kotlin:Eval
    implementation "org.jetbrains.kotlin:kotlin-script-runtime:1.3.72"
    implementation "org.jetbrains.kotlin:kotlin-script-util:1.3.72"
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:1.3.72"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jsr223-embeddable:1.3.72"


    // Discord
    compile 'net.dv8tion:JDA:4.2.1_253'
    compile 'club.minnced:discord-webhooks:0.5.5-rc'

    compile 'com.github.devoxin:flight:2.0.8'

    // Audio
    compile 'com.sedmelluq:lavaplayer:1.3.76'
    //compile 'com.github.Devoxin:lavaplayer:1.3.61'
    compile 'com.github.natanbc:lavadsp:0.7.7'
    compile 'com.sedmelluq:lavaplayer-ext-youtube-rotator:0.2.3'
    compile 'com.sedmelluq:jda-nas:1.1.0'

    // Stats
    //compile 'com.datadoghq:java-dogstatsd-client:2.9.0'

    // Logging
    compile 'io.sentry:sentry:1.7.30'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // Configuration
    compile 'ninja.leaping.configurate:configurate-hocon:3.3'
    compile 'org.json:json:20200518'

    // Database
    compile 'com.rethinkdb:rethinkdb-driver:2.4.0'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.2'
    compile 'redis.clients:jedis:3.2.0'
    compile 'org.redisson:redisson:3.12.4'

    // Networking/Scraping
    compile 'com.squareup.okhttp3:okhttp:3.14.2'
    compile 'org.jsoup:jsoup:1.10.3'

    // Libraries
    compile 'org.apache.commons:commons-text:1.1'
    compile 'commons-io:commons-io:2.6'
    compile 'com.google.guava:guava:23.2-jre'
    implementation 'com.fluffyfirefly:octave-lavaplayer-natives:1.1.10'
}

compileJava.options.encoding = 'UTF-8'

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    kotlinOptions {
        jvmTarget = '11'
    }
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

def getBuildVersion() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }
    return "$version\n${gitVersion.toString().trim()}"
}

task writeVersion() {
    def resourcePath = sourceSets.main.resources.srcDirs[0]
    def resources = file(resourcePath)

    if (!resources.exists()) {
        resources.mkdirs()
    }

    file("$resourcePath/botversion.txt").text = getBuildVersion()
}

build {
    dependsOn writeVersion
}
